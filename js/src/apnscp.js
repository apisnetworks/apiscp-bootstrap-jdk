/*
 * apnscp helper functions
 */
$ = window.jQuery;

import {introJs} from './intro.js';

window.apnscp = {
    navFocus: function () {
        // prevent pushing state on back
        var hash, lockState = false,
            showHash = function (hash) {
                var url = document.location.toString();
                if (!hash && url.match('#')) {
                    hash = '#' + url.split('#')[1]
                }
                if (hash) {
                    $('.nav-item a[href="' + hash + '"]').tab('show');
                }
                return true;
            };
        window.onpopstate = function (event) {
            lockState = true;
            hash = showHash(event.target.location.hash);
            lockState = false;

        };
        $('.nav-item a').on('shown.bs.tab', function (e) {
            if (lockState) {
                return true;
            }
            if (history.pushState) {
                history.pushState(null, null, e.target.hash);
            }
            else {
                location.hash = e.target.hash;
            }
        });
        showHash();
    },
    /** Last mask id generated by mask() */
    _mask_id: 0,
    // via http://www.quirksmode.org/js/detect.html
    browser: {
        init: function () {
            this.type = this.searchString(this.dataBrowser) || "An unknown browser";
            this.version = this.searchVersion(navigator.userAgent)
                || this.searchVersion(navigator.appVersion)
                || "an unknown version";
            this.OS = this.searchString(this.dataOS) || "an unknown OS";
        },
        searchString: function (data) {
            for (var i = 0; i < data.length; i++) {
                var dataString = data[i].string;
                var dataProp = data[i].prop;
                this.versionSearchString = data[i].versionSearch || data[i].identity;
                if (dataString) {
                    if (dataString.indexOf(data[i].subString) != -1)
                        return data[i].identity;
                }
                else if (dataProp)
                    return data[i].identity;
            }
        },
        searchVersion: function (dataString) {
            var index = dataString.indexOf(this.versionSearchString);
            if (index == -1) return;
            return parseFloat(dataString.substring(index + this.versionSearchString.length + 1));
        },
        dataBrowser: [
            {
                string: navigator.userAgent,
                subString: "Chrome",
                identity: "chrome"
            },
            {
                string: navigator.userAgent,
                subString: "OmniWeb",
                versionSearch: "OmniWeb/",
                identity: "omniweb"
            },
            {
                string: navigator.vendor,
                subString: "Apple",
                identity: "safari",
                versionSearch: "Version"
            },
            {
                prop: window.opera,
                identity: "opera",
                versionSearch: "Version"
            },
            {
                string: navigator.vendor,
                subString: "icab",
                identity: "iCab"
            },
            {
                string: navigator.vendor,
                subString: "kde",
                identity: "Konqueror"
            },
            {
                string: navigator.userAgent,
                subString: "firefox",
                identity: "Firefox"
            },
            {
                string: navigator.vendor,
                subString: "camino",
                identity: "Camino"
            },
            {		// for newer Netscapes (6+)
                string: navigator.userAgent,
                subString: "netscape",
                identity: "Netscape"
            },
            {
                string: navigator.userAgent,
                subString: "MSIE",
                identity: "msie",
                versionSearch: "MSIE"
            },
            {
                string: navigator.userAgent,
                subString: "Gecko",
                identity: "mozilla",
                versionSearch: "rv"
            },
            { 		// for older Netscapes (4-)
                string: navigator.userAgent,
                subString: "Mozilla",
                identity: "netscape",
                versionSearch: "Mozilla"
            }
        ],
        dataOS: [
            {
                string: navigator.platform,
                subString: "Win",
                identity: "windows"
            },
            {
                string: navigator.platform,
                subString: "Mac",
                identity: "mac"
            },
            {
                string: navigator.userAgent,
                subString: "iPhone",
                identity: "iphone"
            },
            {
                string: navigator.platform,
                subString: "Linux",
                identity: "linux"
            }
        ]

    },

    debug: function (what) {
        if (!window.console || !console.log) return false;
        console.log(what);
    },

    get_time: function (milliseconds) {
        // Time in milliseconds
        var ts = Math.round((new Date()).getTime());
        if (!milliseconds) {
            ts /= 1000;
        }
        return ts;
    },

    /**
     *  Recognized options
     *      - indicator: HTML entity used to indicate AJAX
     */
    cmd: function (cmd, args, cb, o) {
        if (!jQuery.isFunction(cb) && (jQuery.isArray(cb) || jQuery.isPlainObject(cb))) {
            o = cb;
        }
        o = o || {}
        if (!o.indicator) {
            o.indicator = null;
        }
        var data = {
            args: args
        };
        data[session['name']] = o.contextId || session.id;
        o = $.extend({},
            {
                indicator: null,
                type: "POST",
                url: "/ajax_engine?engine=cmd&fn=" + cmd,
                dataType: "json",
                contentType: (o.dataType || 'json') === 'json' ? 'application/json' : 'application/x-www-form-urlencoded',
                data: (o.dataType || 'json') === 'json' ? JSON.stringify(data) : data,
                beforeSend: function () {
                    if (o.indicator) {
                        $(o.indicator).removeClass('ui-ajax-success ui-ajax-error').addClass('ui-ajax-indicator ui-ajax-loading');
                    }
                    //$('#remote-pb-container .alert:visible').fadeOut(function() { $(this).remove(); });
                },
                async: true,
                /* use custom fail/done handlers */
                useCustomHandlers: false
            }, o);
        var xhr = $.ajax(o),
            deferred = $.Deferred();
        var that = this;
        this.o = o;
        if (!o.useCustomHandlers) {

	        xhr.done(function (response, textStatus, xhr) {
                if (!response.success) {
                    return apnscp.ajaxError.apply(that, [xhr, 'Error (' + cmd + ')', 500]);
                }

                if (o.indicator) {
                    $(o.indicator).removeClass('ui-ajax-loading').addClass('ui-ajax-success');
                }
                /*apnscp.addMessage('success', "success", "success");
                 setTimeout(function() {
                 $('#remote-pb-container').fadeOut();
                 }, 500);*/
                if (cb && typeof(cb) == "function") {
                    cb.call(this, response);
                }
                return deferred.resolve(response, textStatus, xhr);
            }).fail(function (xhr, textStatus, errorThrown) {
                if (that.retry === undefined) {
                    that.retry = 0;
                }
                if (that.retry <= 5) {
	                that.retry++;
                    setTimeout(function() {
	                    var xhrretry = apnscp.cmd.call(that, cmd, args, cb, o).done(
	                        function(response, textStatus, xhr) {
                                return deferred.resolve(response, textStatus, xhr);

                        });
                    }, 125);
                    return;
                }
                apnscp.ajaxError.apply(that, [xhr, textStatus, errorThrown]);
		        return deferred.reject(xhr, textStatus, errorThrown);
            });
        }
		if (o.useCustomHandlers) {
			return xhr;
		}
        return o.async ? deferred : $.parseJSON(xhr.responseText);
    },

    render: function(vars, action) {
        if (action[0] !== '/') {
            action = '/apps/' + session.appId + '/' + action;
        }
        return $.ajax(apnscp.call_app_ajax(null, null, [], {
            url: action,
            method: 'POST',
            dataType: 'html',
            data: vars || {},
        }));
    },

    post: function(vars, action) {
        if (action[0] !== '/') {
            action = '/apps/' + session.appId + '/' + action;
        }
        return $.ajax(apnscp.call_app_ajax(null, null, [], {
            url: action,
            method: 'POST',
            dataType: 'json',
            data: vars || {},
        }))
    },

    ajaxError: function (xhr, textStatus, errorThrown) {
        /** ignore uninitialized requests */
        var text = xhr.responseText, response, msg;
        try {
            response = $.parseJSON(xhr.responseText);
            msg = response['errors'];
            if (typeof(msg) === 'object') {
                msg = msg.map((m) => m.message || m);
            }
            msg = msg.join("\n");
        } catch (e) {
            response = "unparseable: " + text;
            console.log(text);
            if (session.debug && text) {
                var n = text.indexOf('<');
                if (n < 0) {
                    msg = text.substr(0, 128) + '...';
                } else {
                    msg = text.substr(0, n) + "\n" +
                        text.substring(response.indexOf('['),
                            response.indexOf(']') + 1);
                }
            }
        }

        if (this && this.o && this.o.indicator) {
            $(this.o.indicator).removeClass('ui-ajax-loading').addClass('ui-ajax-error');
        }

        if (response.status < 1) return;

        apnscp.addMessage(msg, "error", "Error");
        return xhr;
    },

    addMessage: function (msg, c, heading) {
        //debugger;
        //debugger;
        var $container = $('#remote-pb-container');
        var $msg = $container.find('.template').clone();

        if (c === "error" || c === "danger") {
            c = 'alert-danger';
        } else {
            c = 'alert-success';
            setTimeout(function () {
                $msg.alert('close');
            }, 2500);
        }
        $msg.find('.title').text(heading).end().find('.msg').html(msg);
        $container.append($msg.removeClass('template'));
        $msg.addClass(c + ' show');
        // DOM is pissy if CSS added before render
        setTimeout(function () {
            $msg.css('top', 0);
        }, 10);
    },

    /**
     * Place opaque overlay on element
     * @param {Object} layer
     * @param {Object} options
     */
    mask: function (layer, o) {
        var d = $(layer).offset();
        var sx = $(layer).outerWidth();
        var sy = $(layer).outerHeight();
        o = $.extend({}, {
            css: {
                position: 'absolute',
                top: d.top + 'px',
                left: d.left + 'px',
                width: sx + 'px',
                height: sy + 'px',
                opacity: 0.5,
                zIndex: 10000,
                background: '#666'
            },
            bind: {}
        }, o);
        this._mask_id++;
        var $mask = $('<div id="cp-mask-' + this._mask_id + '" class="mask"></div>').css(
            o.css).appendTo('BODY');
        return $mask;
    },

    encodeEntities: function (s) {
        return $("<div/>").text(s).html();
    },

    decodeEntities: function (s) {
        return $("<div/>").html(s).text();
    },

    call_app: function (app, fn, args, o) {
        return $.ajax(this.call_app_ajax(app, fn, args, o));
    },

    call_app_ajax: function (app, fn, args, o) {
        app = app || session.appId;
        var options = {
                success: function () {
                }, dataType: "json", head: false, indicator: null
            },
            url = '/ajax?engine=app&app=' + app + '&fn=' + fn;

        // single arg passed is callback
        if ($.isFunction(o)) {
            options.success = o;
        } else {
            options = $.extend({}, options, o);
        }
        // CP backwards compatibility
        // some scripts set callback
        if (options.callback) {
            options.success = options.callback;
        }
        try {
            if (!$.isArray(args) && !$.isPlainObject(args)) {
                args = $.makeArray(args);
            }
        } catch (e) {
            console.log("Unknown/erroneous arguments - ", args);
            args = [];
        }
	o = o || {};
        args = {
            args: args,
            type: o && o.dataType || options.dataType,
        };
        args[session['name']] = o.contextId || session.id;
        options = $.extend({}, {
            beforeSend: function () {
                if (options.indicator) {
                    $(options.indicator).removeClass('ui-ajax-success ui-ajax-error').addClass('ui-ajax-indicator ui-ajax-loading');
                }
                //$('#remote-pb-container .alert:visible').fadeOut(function() { $(this).remove(); });
            },
            type: 'POST',
            url: url,
            data: args,
            success: options.success,
            dataType: options.dataType
        }, options);

        var errorCB = options.error || apnscp.ajaxError;
        var successCB = options.success || function () {};
        var that = this;
        options.error = function (xhr, status, errorThrown) {
            if (options.indicator) {
                $(options.indicator).removeClass("ui-ajax-loading").addClass("ui-ajax-error");
            }

            return errorCB.apply(that, [xhr, status, errorThrown]);
        }

        options.success = function (data, status, xhr) {
            if (options.indicator) {
                $(options.indicator).removeClass("ui-ajax-loading").addClass("ui-ajax-success");
            }
            return successCB.apply(that, [data, status, xhr]);
        }

        return options;
    },

    version_compare: function (v1, v2, operator) {

        //       discuss at: http://locutus.io/php/version_compare/
        //      original by: Philippe Jausions (http://pear.php.net/user/jausions)
        //      original by: Aidan Lister (http://aidanlister.com/)
        // reimplemented by: Kankrelune (http://www.webfaktory.info/)
        //      improved by: Brett Zamir (http://brett-zamir.me)
        //      improved by: Scott Baker
        //      improved by: Theriault (https://github.com/Theriault)
        //        example 1: version_compare('8.2.5rc', '8.2.5a')
        //        returns 1: 1
        //        example 2: version_compare('8.2.50', '8.2.52', '<')
        //        returns 2: true
        //        example 3: version_compare('5.3.0-dev', '5.3.0')
        //        returns 3: -1
        //        example 4: version_compare('4.1.0.52','4.01.0.51')
        //        returns 4: 1

        // Important: compare must be initialized at 0.
        var i
        var x
        var compare = 0

        // vm maps textual PHP versions to negatives so they're less than 0.
        // PHP currently defines these as CASE-SENSITIVE. It is important to
        // leave these as negatives so that they can come before numerical versions
        // and as if no letters were there to begin with.
        // (1alpha is < 1 and < 1.1 but > 1dev1)
        // If a non-numerical value can't be mapped to this table, it receives
        // -7 as its value.
        var vm = {
            'dev': -6,
            'alpha': -5,
            'a': -5,
            'beta': -4,
            'b': -4,
            'RC': -3,
            'rc': -3,
            '#': -2,
            'p': 1,
            'pl': 1
        }

        // This function will be called to prepare each version argument.
        // It replaces every _, -, and + with a dot.
        // It surrounds any nonsequence of numbers/dots with dots.
        // It replaces sequences of dots with a single dot.
        //    version_compare('4..0', '4.0') === 0
        // Important: A string of 0 length needs to be converted into a value
        // even less than an unexisting value in vm (-7), hence [-8].
        // It's also important to not strip spaces because of this.
        //   version_compare('', ' ') === 1
        var _prepVersion = function (v) {
            v = ('' + v).replace(/[_\-+]/g, '.')
            v = v.replace(/([^.\d]+)/g, '.$1.').replace(/\.{2,}/g, '.')
            return (!v.length ? [-8] : v.split('.'))
        }
        // This converts a version component to a number.
        // Empty component becomes 0.
        // Non-numerical component becomes a negative number.
        // Numerical component becomes itself as an integer.
        var _numVersion = function (v) {
            return !v ? 0 : (isNaN(v) ? vm[v] || -7 : parseInt(v, 10))
        }

        v1 = _prepVersion(v1)
        v2 = _prepVersion(v2)
        x = Math.max(v1.length, v2.length)
        for (i = 0; i < x; i++) {
            if (v1[i] === v2[i]) {
                continue
            }
            v1[i] = _numVersion(v1[i])
            v2[i] = _numVersion(v2[i])
            if (v1[i] < v2[i]) {
                compare = -1
                break
            } else if (v1[i] > v2[i]) {
                compare = 1
                break
            }
        }
        if (!operator) {
            return compare
        }

        // Important: operator is CASE-SENSITIVE.
        // "No operator" seems to be treated as "<."
        // Any other values seem to make the function return null.
        switch (operator) {
            case '>':
            case 'gt':
                return (compare > 0)
            case '>=':
            case 'ge':
                return (compare >= 0)
            case '<=':
            case 'le':
                return (compare <= 0)
            case '===':
            case '=':
            case 'eq':
                return (compare === 0)
            case '<>':
            case '!==':
            case 'ne':
                return (compare !== 0)
            case '':
            case '<':
            case 'lt':
                return (compare < 0)
            default:
                return null
        }//       discuss at: http://locutus.io/php/version_compare/
        //      original by: Philippe Jausions (http://pear.php.net/user/jausions)
        //      original by: Aidan Lister (http://aidanlister.com/)
        // reimplemented by: Kankrelune (http://www.webfaktory.info/)
        //      improved by: Brett Zamir (http://brett-zamir.me)
        //      improved by: Scott Baker
        //      improved by: Theriault (https://github.com/Theriault)
        //        example 1: version_compare('8.2.5rc', '8.2.5a')
        //        returns 1: 1
        //        example 2: version_compare('8.2.50', '8.2.52', '<')
        //        returns 2: true
        //        example 3: version_compare('5.3.0-dev', '5.3.0')
        //        returns 3: -1
        //        example 4: version_compare('4.1.0.52','4.01.0.51')
        //        returns 4: 1

        // Important: compare must be initialized at 0.
        var i
        var x
        var compare = 0

        // vm maps textual PHP versions to negatives so they're less than 0.
        // PHP currently defines these as CASE-SENSITIVE. It is important to
        // leave these as negatives so that they can come before numerical versions
        // and as if no letters were there to begin with.
        // (1alpha is < 1 and < 1.1 but > 1dev1)
        // If a non-numerical value can't be mapped to this table, it receives
        // -7 as its value.
        var vm = {
            'dev': -6,
            'alpha': -5,
            'a': -5,
            'beta': -4,
            'b': -4,
            'RC': -3,
            'rc': -3,
            '#': -2,
            'p': 1,
            'pl': 1
        }

        // This function will be called to prepare each version argument.
        // It replaces every _, -, and + with a dot.
        // It surrounds any nonsequence of numbers/dots with dots.
        // It replaces sequences of dots with a single dot.
        //    version_compare('4..0', '4.0') === 0
        // Important: A string of 0 length needs to be converted into a value
        // even less than an unexisting value in vm (-7), hence [-8].
        // It's also important to not strip spaces because of this.
        //   version_compare('', ' ') === 1
        var _prepVersion = function (v) {
            v = ('' + v).replace(/[_\-+]/g, '.')
            v = v.replace(/([^.\d]+)/g, '.$1.').replace(/\.{2,}/g, '.')
            return (!v.length ? [-8] : v.split('.'))
        }
        // This converts a version component to a number.
        // Empty component becomes 0.
        // Non-numerical component becomes a negative number.
        // Numerical component becomes itself as an integer.
        var _numVersion = function (v) {
            return !v ? 0 : (isNaN(v) ? vm[v] || -7 : parseInt(v, 10))
        }

        v1 = _prepVersion(v1)
        v2 = _prepVersion(v2)
        x = Math.max(v1.length, v2.length)
        for (i = 0; i < x; i++) {
            if (v1[i] === v2[i]) {
                continue
            }
            v1[i] = _numVersion(v1[i])
            v2[i] = _numVersion(v2[i])
            if (v1[i] < v2[i]) {
                compare = -1
                break
            } else if (v1[i] > v2[i]) {
                compare = 1
                break
            }
        }
        if (!operator) {
            return compare
        }

        // Important: operator is CASE-SENSITIVE.
        // "No operator" seems to be treated as "<."
        // Any other values seem to make the function return null.
        switch (operator) {
            case '>':
            case 'gt':
                return (compare > 0)
            case '>=':
            case 'ge':
                return (compare >= 0)
            case '<=':
            case 'le':
                return (compare <= 0)
            case '===':
            case '=':
            case 'eq':
                return (compare === 0)
            case '<>':
            case '!==':
            case 'ne':
                return (compare !== 0)
            case '':
            case '<':
            case 'lt':
                return (compare < 0)
            default:
                return null
        }
    },
    refresh_gauge: function () {
        var $refresh = $('#ui-gauge-refresh');
        if ($refresh.hasClass('ui-loading-small')) {
            return false;
        }
        $refresh.addClass('ui-ajax-loading ui-loading-small');
        $.getJSON('/ajax?engine=ucard&action=refstats', function (data) {
            var $storage = $('#ui-storage-cluster').clone();
            var $bw = $('#ui-bandwidth-cluster').clone();
            var percentStorage = Math.min(100, Math.round(data.storage['used'] / data.storage['total'] * 100));
            var percentBandwidth = Math.min(100, Math.round(data.bandwidth['used'] / data.bandwidth['total'] * 100));

            $storage.find('.ui-gauge-used').css('width', percentStorage + "%");
            $('span.ui-label-percentage', $storage).text(percentStorage + "%");
            $('span.ui-label-free', $storage).text(Math.round(data.storage['free'] / 1024) + ' MB');

            $bw.find('.ui-gauge-used').css('width', percentBandwidth + "%");
            $('span.ui-label-percentage', $bw).text(percentBandwidth + "%");
            $('span.ui-label-free', $bw).text(Math.round(data.bandwidth['free']) + ' GB');

            $('#ui-storage-cluster').replaceWith($storage);
            $('#ui-bandwidth-cluster').replaceWith($bw);
            $refresh.removeClass('ui-ajax-loading ui-loading-small').addClass('ui-ajax-success');
            $('#ui-account-gauges').effect('highlight', {}, 250);
            setTimeout(function () {
                $refresh.fadeOut('fast').removeClass('ui-ajax-success');
            }, 2500);
        });
        return false;
    },

    hinted: function () {
        $('#ui-app label.hinted').hinted();

        $('#ui-app form').submit(function () {
            $(this).find('textarea.hinted, input.hinted').val("");
        });
    },

    /**
     * Callback function for events
     */
    _hinted_persist: function (e) {
        switch (e.type) {
            case "mouseover":
                if (!$(this).hasClass('hinted')) return this;
                return $(this).val("");
            case "mouseout":
                return $(this).hasClass("hinted") ? $(this).val(e.data.def) : false;
            case "focus":
                return $(this).val("").removeClass("hinted");
            case "blur":
            case "change":
                return $(this).val() ? $(this).unbind(".hinted").removeClass("hinted") :
                    $(this).val(e.data.def).addClass("hinted");
        }

    },

    /**
     *
     * Default Options:
     * onSelect: (Function:{})  callback triggered on entry selection
     * selectField: (String:'') DOM element to populate on "Select Target" confirmation
     * selected: initial directory expanded
     *
     * @param Object o
     *
     * @param String dir
     */
    _explorerInstance: null,
    _explorer: function (o, dir) {
        var FILE_CONTAINER = 'file_container', MODAL_MODE = null;
        if ($('#file_browser').length < 1) {
            var defaults = {
                onSelect: function (file) {
                    $('#selected_dir').text(file);
                },
                selectField: '',
                selected: null,
                onLoad: function () {
                }
            }, $container = $('<div id="' + FILE_CONTAINER + '"><h5 id="file_header" class="">' +
                'Current Path</h5>' + '<h6 id="selected_dir"></h6>' +
                '<fieldset class="form-group"><button name="select_dir" class="btn btn-primary" type="button" id="select_dir" >Select Path</button>' +
                '<button class="btn btn-outline-primary ml-3" type="button" id="create_dir">New Folder</button></fieldset>' +
                '<h4>Directory Browser</h4><div id="file_browser" class="browser_window">' +
                '</div></div>').appendTo($('#modal .modal-body').empty()).show();

            var $el = $('#file_browser', $('#' + FILE_CONTAINER));

            $('#create_dir', $container).click(function () {
                fileTree.createDirectory.apply($el);

            });
            if (o.selectField) {
                $('#select_dir').click(function () {
                    $(o.selectField).focus().val($('#selected_dir').text()).blur();
                    $('#modal').modal('hide');
                });
            }
            var opts = $.extend({}, defaults, o);
            $el.fileTree(opts);
            if (dir) $el.open(dir);
            else if (opts.selected) $el.open(opts.selected);
            this._explorerInstance = $el;
            opts.onLoad();
        } else {
            this._explorerInstance.redisplay(o, dir);
            MODAL_MODE = 'show';
        }
        // @TODO persist last location
        return $('#modal').modal(MODAL_MODE).on('show.bs.modal', function () {
            $('#file_container').show();
        });
    },
    modal: function ($content, o) {
        var o = $.extend({}, {
                buttons: null,
                keyboard: true,
                size: null
            }, o), modalSize, dialog = o.dialog || $('#modal');

        if ($content !== null) {
            // let o.dialog override modal content
            dialog.find('.modal-body').empty().append([].slice.call($content || []).map(
                function (a) {
                    // take a copy of the element otherwise switching
                    // between modals will lose it
                    return $(a).clone(true).removeClass('hide');
                })
            );
        }
        if (!o.keyboard) {
            $('.modal-footer', dialog).find('button').hide();
        }
        if (o.title) {
	        $('.modal-title', dialog).text(o.title);
        }
        if (o.buttons) {
            $('.modal-footer', dialog).find(':not(.ui-close-dialog)').remove().end().prepend(o.buttons);
        }
        modalSize = null;
        if (o.size === "large") {
            modalSize = 'modal-lg';
        } else if (o.size === "small") {
            modalSize = 'modal-sm';
        }

        dialog.children('.modal-dialog').removeClass('modal-lg modal-sm').addClass(modalSize);

        return dialog;
    },

    indicator: function (css) {
        return $('<i class="ui-ajax-indicator"></i>').css(css || {});
    },
    explorer: function (o, dir) {
        if (typeof window['fileTree'] != "object") {
            $.getScript('/js/filetree.js', function () {
                return apnscp.explorer(o, dir);
            });
        } else {
            return this._explorer(o, dir);
        }

    },
    tour: function () {
        return introJs();
    },
    ucwords: function (str) {
        return (str || this + "").replace(/^(.)|\s(.)/g,
            function (c) {
                return c.toUpperCase();
            });
    },
    getParameterByName: function (name, url) {
        if (!url) url = this.getUrl();
        name = name.replace(/[\[\]]/g, "\\$&");
        var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)", "i"),
            results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return '';
        return decodeURIComponent(results[2].replace(/\+/g, " "));
    },
    getUrl: function () {
        return window.location.href;
    },
    _privMap: {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#39;'
    },
    escapeHTML: function (s, forAttribute) {
        var self = this;
        return s.replace(forAttribute ? /[&<>'"]/g : /[&<>]/g, function (c) {
            return self._privMap[c];
        });
    },

    assign_url: function (url) {
        location.href = url;
        return false;
    },
    initUpload: function (o) {
        var progress = $('#progressBar').get(0),
            sizeBox = $('#sizeBox').get(0);
        var defaults = {
            dropzone: 'uploadContainer',
            button: 'upload',
            url: '/apps/filemanager/filemanager-ajax.php', // server side handler
            progressUrl: '/apps/filemanager/filemanager-ajax.php?fn=upload_progress', // enables cross-browser progress support (more info below)
            responseType: 'json',
            name: 'uploaded_file',
            multiple: true,
            hoverClass: 'ui-state-hover',
            focusClass: 'ui-state-focus',
            disabledClass: 'ui-state-disabled',
            onSubmit: function (filename, extension) {
                // Create the elements of our progress bar
                var progress = document.createElement('div'), // container for progress bar
                    bar = document.createElement('div'), // actual progress bar
                    fileSize = document.createElement('div'), // container for upload file size
                    wrapper = document.createElement('div'), // container for this progress bar
                    //declare somewhere: <div id="progressBox"></div> where you want to show the progress-bar(s)
                    progressBox = document.getElementById('progressBox'); //on page container for progress bars

                // Assign each element its corresponding class
                progress.className = 'progress progress-striped';
                bar.className = 'progress-bar progress-bar-success';
                fileSize.className = 'size';
                wrapper.className = 'wrapper';
                // Assemble the progress bar and add it to the page
                progress.appendChild(bar);
                wrapper.innerHTML = '<div class="name">' + filename + '</div>'; // filename is passed to onSubmit()
                wrapper.appendChild(fileSize);
                wrapper.appendChild(progress);
                progressBox.appendChild(wrapper); // just an element on the page to hold the progress bars

                // Assign roles to the elements of the progress bar
                this.setProgressBar(bar); // will serve as the actual progress bar
                this.setFileSizeBox(fileSize); // display file size beside progress bar
                this.setProgressContainer(wrapper); // designate the containing div to be removed after upload
            },

            // Do something after finishing the upload
            // Note that the progress bar will be automatically removed upon completion because everything
            // is encased in the "wrapper", which was designated to be removed with setProgressContainer()
            onComplete: function (filename, response) {
                if (!response) {
                    alert(filename + 'upload failed');
                    return false;
                }
                // Stuff to do after finishing an upload...
            }
        };
        var opts = $.extend({}, defaults, o || {});
        var uploader = new ss.SimpleUpload(opts);
        return uploader;
    },
    themeColors: function () {
        var json = window.getComputedStyle(document.body, '::before')['content'];
        if (!json) {
            return {};
        }
        return $.parseJSON(json.unquote());

    }
};

/**
 *
 * End of apnscp functions
 *
 */

(function ($) {
    // mousewheel scrolling features
    $.event.special.mousewheel = {
        setup: function () {
            var handler = $.event.special.mousewheel.handler;

            // Fix pageX, pageY, clientX and clientY for mozilla
            if (apnscp.browser.type == "mozilla")
                $(this).bind('mousemove.mousewheel', function (event) {
                    $.data(this, 'mwcursorposdata', {
                        pageX: event.pageX,
                        pageY: event.pageY,
                        clientX: event.clientX,
                        clientY: event.clientY
                    });
                });

            if (this.addEventListener)
                this.addEventListener((apnscp.browser.type == 'mozilla' ? 'DOMMouseScroll' : 'mousewheel'), handler, false);
            else
                this.onmousewheel = handler;
        },

        teardown: function () {
            var handler = $.event.special.mousewheel.handler;

            $(this).unbind('mousemove.mousewheel');

            if (this.removeEventListener)
                this.removeEventListener((apnscp.browser.type == 'mozilla' ? 'DOMMouseScroll' : 'mousewheel'), handler, false);
            else
                this.onmousewheel = function () {
                };

            $.removeData(this, 'mwcursorposdata');
        },

        handler: function (event) {
            var args = Array.prototype.slice.call(arguments, 1);

            event = $.event.fix(event || window.event);
            // Get correct pageX, pageY, clientX and clientY for mozilla
            $.extend(event, $.data(this, 'mwcursorposdata') || {});
            var delta = 0, returnValue = true;

            if (event.wheelDelta) delta = event.wheelDelta / 120;
            if (event.detail) delta = -event.detail / 3;
            //		if ( $.browser.opera  ) delta = -event.wheelDelta;

            event.data = event.data || {};
            event.type = "mousewheel";

            // Add delta to the front of the arguments
            args.unshift(delta);
            // Add event to the front of the arguments
            args.unshift(event);

            return $.event.handle.apply(this, args);
        }
    }

    /**
     * jQuery functions
     */

    $.widget("custom.combobox", {
        _create: function () {
            this.wrapper = $("<div>")
                .addClass("input-group " + (window.hasTouchscreen() ? 'd-none d-sm-flex' : ''))
                .insertAfter(this.element);

            if (window.hasTouchscreen()) {
                this.element.addClass("d-block w-100 d-sm-none");
            } else {
                this.element.hide();
            }
            this._createAutocomplete();
            this._createShowAllButton();
        },

        _createAutocomplete: function () {
            var selected = this.element.children(":selected"),
                value = selected.val() ? selected.text() : "",
                attrs = {
                    "title": "",
                    tabindex: this.element.attr('tabindex') || 0,
                    'placeholder': this.element.attr('placeholder') || 'Select',
                }, chk = this.element.attr('autofocus');

            this.input = $("<input>")
                .appendTo(this.wrapper)
                .val(value)
                .attr(attrs)
                .addClass("form-control")
                .autocomplete({
                    delay: 0,
                    minLength: 0,
                    source: $.proxy(this, "_source"),
                    classes: {
                        'ui-autocomplete': 'dropdown-menu'
                    }
                });

            if (typeof chk !== typeof undefined && chk !== false) {
                this.input.focus();
            }

            var suppressKeyPress;
            this._on(this.input, {
                keydown: function (event) {
                    this.input.autocomplete("instance")._trigger('keydown', event);
                    var keyCode = $.ui.keyCode;
                    suppressKeyPress = false;
                    switch (event.keyCode) {
                        case keyCode.PAGE_UP:
                        case keyCode.PAGE_DOWN:
                            suppressKeyPress = true;
                            event.preventDefault();
                            break;
                    }
                },

                keypress: function (event) {
                    this.input.autocomplete("instance")._trigger('keypress', event);
                    if (suppressKeyPress) {
                        suppressKeyPress = false;
                        event.preventDefault();
                        return;
                    }
                },

                autocompleteselect: function (event, ui) {
                    ui.item.option.selected = true;
                    this._trigger("select", event, {
                        item: ui.item.option
                    });
                },
                autocompletechange: "_removeIfInvalid"
            });
        },

        _createShowAllButton: function () {
            var input = this.input,
                wasOpen = false;

            $("<a>")
                .attr({
                    "tabIndex": -1,
                    "title": "Show All",
                    'class': 'btn dropdown-toggle input-group-addon'
                })
                .appendTo(this.wrapper)
                .on("mousedown", function () {
                    wasOpen = input.autocomplete("widget").is(":visible");
                })
                .on("click", function () {
                    input.trigger("focus");

                    // Close if already visible
                    if (wasOpen) {
                        return;
                    }

                    // Pass empty string as value to search for, displaying all results
                    input.autocomplete("search", "");
                });
        },

        _source: function (request, response) {
            var matcher = new RegExp($.ui.autocomplete.escapeRegex(request.term), "i");
            response(this.element.children("option").map(function () {
                var text = $(this).text();
                if (this.value && (!request.term || matcher.test(text)))
                    return {
                        label: text,
                        value: text,
                        option: this
                    };
            }));
        },

        _removeIfInvalid: function (event, ui) {

            // Selected an item, nothing to do
            if (ui.item) {
                return;
            }

            // Search for a match (case-insensitive)
            var value = this.input.val(),
                valueLowerCase = value.toLowerCase(),
                valid = false;
            this.element.children("option").each(function () {
                if ($(this).text().toLowerCase() === valueLowerCase) {
                    this.selected = valid = true;
                    return false;
                }
            });

            // Found a match, nothing to do
            if (valid) {
                return;
            }

            // Remove invalid value
            this.input
                .val("")
                .attr("title", value + " didn't match any item");
            this.element.val("");
            this.input.autocomplete("instance").term = "";
        },

        _destroy: function () {
            this.wrapper.remove();
            this.element.show();
        }
    });

    // jQuery on an empty object, we are going to use this as our Queue
    var ajaxQueue = $({});

    $.ajaxQueue = function (ajaxOpts) {
        var jqXHR,
            dfd = $.Deferred(),
            promise = dfd.promise();

        if (typeof ajaxOpts == "undefined") {
            return $.Deferred(function () {
                this.resolve(['', '200', jqXHR]);
            }).promise();
        }

        // run the actual query
        function doRequest(next) {
            jqXHR = $.ajax(ajaxOpts);
            jqXHR.done(dfd.resolve)
                .fail(dfd.reject)
                .always(next);
        }

        // queue our ajax request
        ajaxQueue.queue(doRequest);

        // add the abort method
        promise.abort = function (statusText) {

            // proxy abort to the jqXHR if it is active
            if (jqXHR) {
                return jqXHR.abort(statusText);
            }

            // if there wasn't already a jqXHR we need to remove from queue
            var queue = ajaxQueue.queue(),
                index = $.inArray(doRequest, queue);

            if (index > -1) {
                queue.splice(index, 1);
            }

            // and then reject the deferred
            console.log(ajaxOpts.context);
            dfd.rejectWith(ajaxOpts.context || ajaxOpts, [promise, statusText, ""]);
            return promise;
        };

        return promise;
    };

    $.fn.extend({
	    persistDropdownForm: function (toggleClass) {
		    this.on('click', function (e) {
			    if ($(this).hasClass(toggleClass || 'dropdown-menu-form')) {
				    e.stopPropagation();
			    }
		    });
        },

	/**
         *
         * @param string s CSS selector
         */
        hinted: function () {
            this.each(function () {
                var label = $(this).text();
                var $input = $('#' + $(this).prop('for'));
                if (!$input.length) return;

                $input.val(label).addClass("hinted");
                $input.bind("focus.hinted blur.hinted change.hinted mouseover.hinted mouseout.hinted",
                    {
                        def: label
                    },
                    apnscp._hinted_persist);

            });
            return this;
        },

        expandable: function (selector) {
            var lastExpanded = null, $el, self = $(this);
            $el = $(this).siblings(selector);

            $el.hide();

            self.addClass('ui-list-expander').click(function () {
                var $this = $(this);
                if (lastExpanded !== null) {
                    lastExpanded.siblings(selector).slideUp();
                    lastExpanded.removeClass('ui-list-expanded');
                }
                if ($this.is(lastExpanded)) {
                    lastExpanded = null;
                    return true;
                }
                $this.addClass('ui-list-expanded').siblings(selector).slideDown();
                lastExpanded = $this;
                return true;
            });
        },
        setCursorPosition: function (pos, end, o) {
            o = $.extend({file: false}, o);
            var t = this.get(0);
            t.focus();
            // end param not supplied
            // -1: move to end of selection
            if (pos < 0) {
                pos = t.value.length;
            } else if (end < 0) {
                if (o.file && t.value.lastIndexOf('.') > 0)
                    end = t.value.lastIndexOf('.');
                else
                    end = t.value.length;
            }
            if (end == null) end = pos;


            if (t.setSelectionRange) {
                t.setSelectionRange(pos, end);
            } else if (t.createTextRange) {
                var range = t.createTextRange();
                range.collapse(true);
                range.moveEnd('character', end);
                range.moveStart('character', pos);
                range.select();
            }
            return this;
        },

        /**
         * Fire collapse toggle on radio selection
         */
        radioCollapse: function () {
            $(this).each(function (index, item) {
                var $item = $(item),
                    $target = $($item.data('target'));
                $('input[type=radio][name="' + item.name + '"]').on('change', function () {
                    var $that = $(this);
                    if ($item.is(':checked')) {
                        $target.collapse('show').on('shown.bs.collapse', function () {
                            $that.prop('checked', true);
                        });
                    } else {
                        $target.collapse('hide');
                    }
                });
            });
        },

        checkPassword: function (options) {
            var options = $.extend({}, {
                    minScore: 30,
                    passwordField: null,
                    messageField: null,
                    confirmContainer: null,
                }, options),
                password = this.val();


            this.keydown(function (e) {
                var $target = $(e.currentTarget), val = $target.val();
            }).focus(function () {
                $('.password-confirm-container').show('fade', 500);
            }).blur(function () {
                var pw = $(this).val(), score = apnscp.checkPassword(pw);
                console.log(pw, score);
            });

            //debugger;

            var minScore = 30;

            return ("passwords do not match");

            var score = this.passwordStrength(password);

            if (score == 0) {
                var color = "progress-bar-danger";
                var message = "Very Weak";
            } else if (score <= 56) {
                var color = "progress-bar-danger";
                var message = "Weak";
            } else if (score <= 74 && score > 56) {
                var color = "progress-bar-warning";
                var message = "Acceptable";
            }

            if (score >= 75) {
                var color = "progress-bar-success";
                var message = "Good";
            }

            if (score >= 85) {
                var message = "Strong";
            }

            if (score >= 95) {
                var message = "AWESOME";
            }

            if (score >= minScore) {
                $('.progress-msg').text(message);
                $('#password-progress').css('width', perScore + "%");
                $('#password-progress').removeClass("progress-bar-success progress-bar-danger progress-bar-invalid progress-bar-warning")
                    .addClass(color);
                if (submit == true) {
                    return true;
                }
            } else if (password.length >= minLength) {
                $('.progress-msg').text(message);
                $('#password-progress').css('width', perScore + "%");
                $('#password-progress').removeClass("progress-bar-success progress-bar-danger progress-bar-invalid progress-bar-warning")
                    .addClass(color);
                if (submit == true && preventForm == true) {
                    return false;
                }
            } else {
                $('#password-status').text($('#password-status').data('default'));
                $('#password-progress').width('100%').removeClass("progress-bar-success progress-bar-danger progress-bar-warning").addClass('progress-bar-invalid');
            }

        },

        passwordStrength: function (password) {
            var submit = submit || false;
            var score = 0;

            var minLength = 9;

            var reqPoints = 15;
            var extPoints = 5;
            var maxScore = 45;

            if (password.length < minLength) return 0;

            //If the password is equal to/longer than min length add req points
            if (password.length >= minLength) score = score + reqPoints;

            //if password has at least one number and one letter give req points. This ensures that the minimum score never reaches if no number.
            if (password.match(/\d+/) && password.match(/[a-z]/) && password.match(/[A-Z]/)) score += reqPoints;

            //if password has a special char add ext points
            if (password.match(/.[!,@,#,$,%,^,&,*,?,_,~,-,(,)]/)) score += extPoints;

            //if password is longer than 12 add ext points
            if (password.length > 12) score += extPoints;

            // If Password is longer than 18 chars add ext points
            if (password.length > 18) score += extPoints;

            if (score > 0) {
                perScore = (score / maxScore) * 100;
            } else {
                perScore = 0;
            }

            return perScore;
        },

        highlight: function (o) {
            o = $.extend({click: true}, o);
            this.hover(function () {
                $(this).find('li,td,div.row').addClass("highlight_over");
            }, function () {
                $(this).find('li,td,div.row').removeClass("highlight_over");
            }).on('click', function (e) {
                if (!o.click) return true;

                var target = $(e.target).get(0), node = target.nodeName, type =
                    target.type || "";
                // only fire if
                if (node !== 'SPAN' && node !== 'DIV' && node !== 'LI' && node != 'TD' &&
                    (node != 'INPUT' || (type && type.toUpperCase() != 'CHECKBOX'))) {
                    return true;
                }

                var $checkbox = $(this).find(':checkbox:eq(0)'),
                    isChecked = $checkbox.prop('checked');
                $(this).find('li,td,div.row').toggleClass('ui-highlight');
                // originated within checkbox, no need to fire

                if (e.target.type && e.target.type != 'undefined' && e.target.type.toLowerCase() == 'checkbox') {
                    // pass
                } else if (isChecked) {
                    $checkbox.prop('checked', false);
                } else {
                    $checkbox.prop('checked', true);
                }

                return true;
            });


            return this;
        },
        ajaxWait: function (o) {
            var INDICATOR = 'ui-ajax-indicator ui-ajax-loading', items = [],
                o = $.extend({}, {
                    disable: true,
                    reset: true
                }, o);

            this.each(function (i) {
                var $btn = $(this),
                    type = $btn.get(0).type.toLowerCase(),
                    node = $btn.get(0).nodeName.toUpperCase(),
                    hasForm = false;
                items.push(this);
                if (type === "submit") {
                    hasForm = true;
                    if (i === 0) {
                        // only bind this event to first submit object
                        // failure to do so will replace all fellow
                        $(this).closest('form').on('submit.wait', function (e) {
                            $(e.target).triggerHandler('click');
                            return true;
                        });
                    }
                }
                $btn.on('click.wait', function (e) {
                    if (e.isDefaultPrevented()) {
                        return false;
                    }
                    var oldClass = '',
                        $b = $(this),
                        $icon = $b.find('.fa');
                    if ($icon.get(0)) {
                        var oldClass = $icon.get(0).className.split(/\s+/).filter(function (name) {
                            return name !== "fa";
                        }).join(" ");
                    }
                    if (oldClass) {
                        $icon.attr('data-original-css', oldClass).removeClass(oldClass).addClass(INDICATOR);
                    } else if (node === "BUTTON") {
                        // don't worry about input type="submit", can't support
                        if ($icon.get(0)) {
                            $icon.addClass(INDICATOR);
                        } else {
                            $b.attr('data-original-css', "").prepend($('<i class="fa ' + INDICATOR + '"/>'));
                        }

                    }
                    var $input = $('<input/>').attr({
                        type: 'hidden',
                        name: $btn.attr('name'),
                        value: $btn.attr('value')
                    });
                    if (node === "BUTTON") {
                        $b.append($input);
                    } else {
                        $b.after($input);
                    }
                    if (o.disable && hasForm) {
                        $b.prop('disabled', true);
                        $b.closest('form').unbind('.wait').submit();
                    }
                    return true;
                });
            });
            if (o.reset) {
                $(document).ajaxStop(function () {
                    var filter = INDICATOR.replace(/(?:^|\s)(\w)/g, '.$1');
                    $(filter, items).each(function () {
                        $(this).removeClass(INDICATOR).addClass($(this).data('original-css'));
                        if (o.disable) {
                            $(this).parent().prop('disabled', false);
                        }
                    });
                    return true;
                });
            }
            return this;
        },
        /**
         * Toggle first checkbox for all siblings
         */
        toggleAll: function (o) {
            var o = this.extend({}, {changed: false}, o);
            var toggled;
            var toggle = function (mode) {
                if (mode) $(this).addClass('ui-highlight');
                else      $(this).removeClass('ui-highlight');
            }

            var target = this, siblings;
            if ((target.parent('label').get(0) || '').length) {
                target = [this, target.parent('label')];
            }
            $(target).click(function (e) {
                e.stopImmediatePropagation();
                var $p = $(this).parent().siblings(), checkbox;
                if (toggled == undefined) {
                    toggled = 0;
                    if (o.changed) {
                        $p.find(':checkbox:first:checked').addClass('toggleAll-checked');
                    }
                }
                toggled ^= 1;
                if (o.changed) {
                    $p.each(function () {
                        var defstate = $(this).find(':checkbox:first').hasClass('toggleAll-checked');
                        $(this).find(':checkbox').prop('checked', toggled ^ defstate);
                        toggle.call(this, toggled ^ defstate);
                    });
                }
                else {
                    toggle.call(this, toggled);
                }
                if (!target.is(':checkbox')) {
                    checkbox = target.find(':checkbox:first');
                } else {
                    checkbox = target;
                }
                // jQuery special.click property, fires checkbox twice
                checkbox.prop('checked', toggled ^ 1);
            });
            return true;
        },

        /**
         *
         * Options:
         *    selectAll (bool): select the entire range
         *  selectRange
         *  file      (bool)
         * @param String sel Custom selector, defaults to span
         * @param Array  o   Additional options
         */
        renameRow: function (sel, o) {
            var __rename_ctr = 0;
            this.click(function () {
                if (!sel) sel = 'span';
                if (o.parentSelector) {
                    var $me = $(this).closest(o.parentSelector).children().find(sel);
                } else {
                    var $me = $(this).parent().siblings().find(sel);
                }

                if (!$me.length) return;
                var old_val = $.trim($me.text());
                var last = old_val.length - 1;
                if (last > -1 && old_val.charAt(last) == '/')
                    old_val = old_val.substr(0, last);
                var node = $('<input type="submit"/>').prop({
                    name: 'rename',
                    value: 'Save'
                }).addClass('btn btn-primary');
                $me.html('<input type="hidden" name="ren_orig[' + __rename_ctr + ']" ' +
                    'value="' + old_val + '"/>').append(
                    $('<input type="text" class="rename" name="ren_new[' + __rename_ctr + ']" ' +
                        'value="' + old_val + '" />').keydown(function (e) {
                        if (e.keyCode === 13) {
                            e.preventDefault();
                            node.click();
                            return false;
                        } else if (e.keyCode === 27) {

                        }
                        return true;

                    }));
                if (o.file || o.selectAll) {
                    $(':input:visible', $me).setCursorPosition(0, -1, o);
                }
                $(":input:visible:enabled:first", $me).focus();
                $me.parent().click(function (e) {
                    return false;
                });
                __rename_ctr++;

                $(this).parent().html(node);
                return false;
            });
            return this;
        },

        rating: function (opts) {
            var def = {input: true, inputName: "rating", auto: true}, rating = 5;
            $.extend(opts, def, opts);
            if (opts.input) {
                $(this).append($('<input type="hidden" name="' + opts.inputName + '" value="5" />'));
            }
            $(this).children('span').mouseover(function () {
                $(this).prevAll().removeClass('fa-star-o').addClass('fa-star').end().removeClass('fa-star-o').addClass('fa-star').nextAll().removeClass('fa-star').addClass('fa-star-o');
                return true;

            }).click(function () {
                rating = $(this).prevAll().length + 1;
                if (opts.input) {
                    $(this).siblings(':input[name=' + opts.inputName + ']').val(rating);
                }
            }).css('cursor', 'pointer').end().mouseleave(function () {
                $(this).children('span:eq(' + (rating - 1) + ')').triggerHandler('mouseover');
                return true;

            });

            return this;
        },

        /**
         * Transform an ordered/unordered list into a scrollable list
         *
         * @param {Object} options
         */
        floatList: function (options) {
            var opt = this.extend({},
                {
                    callback: null,
                    inputClass: 'ui-selectbox',
                    containerClass: 'ui-selectbox-wrapper',
                    hoverClass: 'ui-selectbox-selected',
                    debug: false,
                    input: false,
                    onSelect: function () {
                    }
                }, options);
            var elm_id = this.prop('id');
            var inFocus = false;
            var hasfocus = 0;
            //jquery object for select element
            var $select = this;
            // jquery container object
            var $container = setupContainer(opt);
            //jquery input object
            var $input = opt.input;
            // 1: keyboard
            // 0: mouse
            if (!$input) {
                $input = setupInput(opt);
            }

            $input.prop({
                tabIndex: $select.prop('tabindex'),
                autocomplete: "off"
            });
            // hide select and append newly created elements
            $select.hide().before($container).hide();
            init();
            var $lastActive = $('ul li:last', $container);

            $input
                .keydown(function (event) {
                    switch (event.keyCode) {
                        // home
                        case 36:
                            event.stopPropagation();
                            event.preventDefault();
                            return movePos(0);
                        case 35:
                            event.preventDefault();
                            return movePos(-1);
                        case 33: //pgup
                        case 38: // up
                            event.preventDefault();
                            moveSelect(-1);
                            return false;
                        case 34: //pgdown
                        case 40: // down
                            event.preventDefault();
                            moveSelect(1);
                            return false;
                        //case 9:  // tab
                        case 13: // return
                            if ($container.is(':visible')) {
                                event.preventDefault(); // seems not working in mac !
                                setCurrent($('li.' + opt.hoverClass, $container));
                                hideMe();
                                return false;
                            }
                            return true;
                    }
                })
                .blur(function () {
                    if (!$container.is(':visible') || hasfocus <= 0) {
                        hideMe();
                    }
                    return true;
                }).focus(function () {
                if ($container.not(':visible')) {
                    inFocus = true;
                    $container.show();
                    scrollTo($lastActive);
                }
                return true;
            });

            function setupInput(options) {
                var $input = $("<input type='text' />");
                $input.prop({
                    id: elm_id + "_input",
                    readonly: "readonly"
                }).addClass(options.inputClass).click(function () {
                    if (!inFocus) {
                        $container.toggle();
                    }
                });
                return $input;
            }

            function hideMe() {
                hasfocus = 0;
                $container.hide();
            }

            function activate($el) {
                $lastActive.removeClass(opt.hoverClass);
                $lastActive = $el.addClass(opt.hoverClass);

            }

            function init() {
                $container.append(getSelectOptions($input.prop('id'))).hide();
                //$container.width($input.outerWidth());
            }

            function setupContainer(options) {
                var $container = $("<div>");
                $container.prop('id', elm_id + '_container').addClass(options.containerClass);

                return $container;
            }

            function movePos(pos) {
                var selector;
                if (pos == 0) {
                    selector = 'first';
                }
                else if (pos == -1) {
                    selector = 'last';
                }
                else {
                    selector = 'eq(' + pos + ')';
                }
                $e = $("li.ui-float-box", $container).siblings(':visible:' + selector);
                if ($e.length < 1) return false;
                activate($e);
                scrollTo($e);
                return false;
            }

            function moveSelect(step) {
                var $steps = $("li.ui-float-box", $container).siblings(':visible'),
                    ll = $steps.length,
                    $e = $lastActive.is(':visible') ? $lastActive : $(':visible', $steps).eq(0);
                if (ll < 1) return false;
                // find the next visible list item
                // jQuery cache variable
                var right = $($e, $steps).nextAll(':visible').length,
                    left = $($e, $steps).prevAll(':visible').length,
                    pos = left;

                if (step > right) {
                    step = (step - right) % ll;
                }
                else if (step + left < 1) {
                    step = ll + (step + left) % ll;
                }
                else step += pos;
                $e = $steps.eq(step + pos);
                activate($e);
                scrollTo($e);
            }

            function scrollTo($el) {
                var pos = $el.position(), top = Math.round(pos.top);
                var newpos;
                var parentH = $container.height();
                var height = $el.outerHeight();
                // item is within view
                //console.log($el.offset(), "top: ",top,"containerH: ",parentH, "itemH: ",height);
                if (top > 0 && (top + height < parentH)) return;
                var pPos = $container.scrollTop();
                if (top + height > parentH) {
                    // scroll down
                    // position + height of item > container height
                    //console.log("Down from " + pPos + " to " + ($container.scrollTop()+top-parentH+height));
                    newpos = $container.scrollTop() + top + height - parentH;
                } else {
                    // scroll up
                    //console.log("Up   from " + pPos + " to " + ($container.scrollTop()+top));
                    newpos = $container.scrollTop() + top;
                }
                $container.scrollTop(newpos);
            }

            function setCurrent($li) {
                var ar = ('' + $li.prop('id')).split('_'),
                    el = ar[ar.length - 1], text = $li.text();
                $select.val($('option', $select).eq(el).val());
                if (!opt.onSelect || !opt.onSelect.call(this, $input, $li))
                    $input.val(text);

                return true;
            }

            // select value
            function getCurrentSelected() {
                return $select.val();
            }

            // input value
            function getCurrentValue() {
                return $input.val();
            }

            function getSelectOptions(parentid) {
                var select_options = [];
                var ul = document.createElement('ul'), ulparent, optgroup = null;
                var $all = $select.find('option, optgroup');
                var j = 0;
                // optgroup
                var k = -1;
                //var og = document.createElement('ul');
                for (var i = 0; i < $all.length; i++) {
                    var elem = $all[i], $elem = $(elem);

                    if (elem.nodeName.toUpperCase() == 'OPTGROUP') {
                        optgroup = $elem.prop('label');
                        k = $elem.children().length;
                        continue;
                    }
                    var app = document.createElement('span');
                    var li = document.createElement('li');
                    li.setAttribute('id', parentid + '_' + j);
                    app.className = 'appname';
                    app.appendChild(document.createTextNode($elem.text()));
                    li.appendChild(app);

                    var search = document.createElement('span');
                    search.className = 'appsearch';

                    if (optgroup) {
                        var optcat = document.createElement('span');
                        optcat.className = 'appcat';
                        optcat.appendChild(document.createTextNode(optgroup));
                        li.appendChild(optcat);
                    }
                    if (k == 0) {
                        // optgroup is satisfied
                        k = -1;
                        optgroup = null;
                    }
                    if (opt.callback) opt.callback(li, j, elem);
                    var s = document.createTextNode($(li).text().toUpperCase());
                    search.appendChild(s);
                    li.appendChild(search);
                    if ($elem.is(':selected')) {
                        //					$input.val($elem.html());
                        //					activate($(li));
                    }
                    li.className = 'ui-float-box';
                    ul.appendChild(li);
                    if (k > 0) k--;
                    j++;
                }
                $('li', ul).mouseover(function (e) {
                    hasfocus = 1;
                    activate($(this));
                })
                    .mouseout(function (e) {
                        hasfocus = -1;
                    })
                    .click(function (e) {
                        setCurrent($(this));
                        hideMe();
                    });
                return ul;
            }

            return this;
        },


        /**
         * Create a scollable div
         * @param {Object} o
         *    Options:
         *    height     : css div height
         *    orientation: vertical or horizontal
         *    container  : container to transform
         *    value      :
         *    css        :
         */
        scroll: function (o) {

            var o = $.extend({}, {
                height: '150px',
                orientation: 'vertical',
                container: null,
                value: -1,
                css: {'float': 'left'}
            }, o);
            if (!o.container) {
                o.container = $('<div />').before($(this)).prependTo($(this)).css({
                    height: o.height,
                    overflow: 'hidden'
                });
            } else {
                o.container = $(o.container);
            }
            var height = this.height();
            var cheight = o.container.height();
            var max = height - cheight + 10;
            var t = $(this);
            if (height < cheight) return false;
            if (o.value > 0) {
                o.container.scrollTop(o.value);
            }
            var $slider = $('<div class="slider" />').css('height', cheight).css(o.css).slider({
                orientation: o.orientation,
                min: 0,
                max: max,
                value: o.value < 0 ? 0 : (cheight - o.value) / cheight * max
            }).bind('slide', function (event, ui) {
                o.container.scrollTop(max - ui.value);
            });
            o.container.mousewheel(function (e, delta) {
                e.preventDefault();

                delta *= parseInt($(o.container).css('fontSize'));
                var val = ($slider.slider('option', 'value') + delta);
                if (delta > 0 && val > max || delta < 0 && val < 0) return false;
                return $slider.slider('option', 'value', val).triggerHandler('slide', {
                    value: val
                });
            }).before($slider);
        },
        mousewheel: function (fn) {
            return fn ? this.bind("mousewheel", fn) : this.trigger("mousewheel");
        },

        unmousewheel: function (fn) {
            return this.unbind("mousewheel", fn);
        },

        styleColors: function () {
            var json = window.getComputedStyle(document.body, '::before')['content'];
            if (!json) {
                return {};
            }
            return $.parseJSON(json.unquote());

        }

    });

    // Chrome/Opera
    if (!session.debug) {
        window.onerror = function (msg, file, line, col, error) {
            if (-1 < msg.indexOf("is transitioning")) {
                return true;
            }
            $.ajax({
                type: "POST",
                cache: false,
                url: "/apps/error",
                data: $.param({
                    'mode': 'report',
                    'message': msg || {},
                    'stack': error && error.stack || {},
                    'file': file || {},
                    userAgent: navigator.userAgent,
                    'line': line,
                    'col': col,
                    'website': null
                }),
                success: function () {
                    apnscp.debug(error && error.stack || {});
                    apnscp.debug("Report sent");
                    apnscp.debug(file + ' [' + line + ']: ' + msg);
                }
            });

            if (!session.debug) {
                return true;
            }
            //console.log("simulated debug request - " + error);
        }
    }
})(jQuery);


apnscp.browser.init();

String.prototype.ucwords = apnscp.ucwords;
// unicode base64 conversion
window.utoa = function(str) {
	return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function(match, p1) {
		return String.fromCharCode('0x' + p1);
	}));
}

window.atou = function(str) {
	return decodeURIComponent(Array.prototype.map.call(atob(str), function(c) {
		return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
	}).join(''));
}

apnscp.collapseInput = function (arr) {
    return arr.reduce(function(map, obj) {
        map[obj.name] = obj.value;
        return map;
    }, {});
}
